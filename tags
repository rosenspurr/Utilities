!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C#	E,event	/events/
!_TAG_KIND_DESCRIPTION!C#	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C#	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C#	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C#	f,field	/fields/
!_TAG_KIND_DESCRIPTION!C#	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C#	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!C#	m,method	/methods/
!_TAG_KIND_DESCRIPTION!C#	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C#	p,property	/properties/
!_TAG_KIND_DESCRIPTION!C#	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C#	t,typedef	/typedefs/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C#	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/gorecki/offerings/Mazewar/MZ_unity/Assets/Utilities/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
IsMeshRendererEnabled	RenderingUtils.cs	/^        public static bool IsMeshRendererEnabled(Transform p)$/;"	m	class:Utilities.Rendering.RenderingUtils
LerpUtils	LerpUtils.cs	/^   public static class LerpUtils$/;"	c	namespace:Utilities.Lerpers
RenderingUtils	RenderingUtils.cs	/^	public static class RenderingUtils$/;"	c	namespace:Utilities.Rendering
SetAlphaRecursive	RenderingUtils.cs	/^        public static void SetAlphaRecursive(Transform p, float alpha)$/;"	m	class:Utilities.Rendering.RenderingUtils
SetLayerRecursive	RenderingUtils.cs	/^		public static void SetLayerRecursive(Transform root, int layer)$/;"	m	class:Utilities.Rendering.RenderingUtils
SetRecursiveColor	RenderingUtils.cs	/^        public static void SetRecursiveColor(Transform p, Color color)$/;"	m	class:Utilities.Rendering.RenderingUtils
TimedLerp	LerpUtils.cs	/^      public static float TimedLerp(float from, float to, ref float elapsed, float duration, boo/;"	m	class:Utilities.Lerpers.LerpUtils
ToggleMeshRendererRecursive	RenderingUtils.cs	/^        public static void ToggleMeshRendererRecursive(Transform p, bool enable)$/;"	m	class:Utilities.Rendering.RenderingUtils
Utilities.Lerpers	LerpUtils.cs	/^namespace Utilities.Lerpers$/;"	n
Utilities.Rendering	RenderingUtils.cs	/^namespace Utilities.Rendering$/;"	n
